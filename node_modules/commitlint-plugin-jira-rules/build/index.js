!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("commitlintPluginJira",[],e):"object"==typeof exports?exports.commitlintPluginJira=e():t.commitlintPluginJira=e()}(this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"JIRA_RULES",(function(){return o})),n.d(r,"COMMIT_MESSAGE_SEPARATOR",(function(){return s})),n.d(r,"COMMIT_TASK_IDS_SEPARATOR",(function(){return i})),n.d(r,"COMMIT_TASK_STATUS_PATTERN",(function(){return a})),n.d(r,"TASK_ID_SEPARATOR",(function(){return m})),n.d(r,"COMMIT_STATUS_SEPARATORS",(function(){return u})),n.d(r,"UPPERCASE",(function(){return c})),n.d(r,"LOWERCASE",(function(){return l})),n.d(r,"COMMIT_DESCRIPTION_SEPARATOR",(function(){return d}));const o={commitStatusCase:"jira-commit-status-case",taskIdCase:"jira-task-id-case",taskIdSeparator:"jira-task-id-separator",taskIdEmpty:"jira-task-id-empty",taskIdMaxLength:"jira-task-id-max-length",taskIdMinLength:"jira-task-id-min-length",commitMessageSeparator:"jira-commit-message-separator",taskIdProjectKey:"jira-task-id-project-key"},s=":",i=",",a=/\[.*\]/gi,m="-",u={start:"[",end:"]"},c="uppercase",l="lowercase",d="\n";var f=t=>{const e=t.split(d).filter(t=>t)[0].split(s),n=e.length>=2?e[0]:"",r=n.replace(a,"").trim(),o=e.length>2?e.filter((t,e)=>e>0).join(s).trim():e[e.length-1].trim(),m=n.split(u.end),c=m.length?m[0].replace(u.start,"").trim():"";return{commitTaskIds:r.split(i).map(t=>t.trim()).filter(t=>t),commitFooter:o,commitHeader:r,commitStatus:c}};n.d(e,"commitlintJiraConstants",(function(){return r})),n.d(e,"parseCommitMessage",(function(){return f}));const p={commitlintJiraConstants:r,parseCommitMessage:f};e.default=p}]).default},function(t,e,n){"use strict";n.r(e);var r=n(0);var o=(t,e,n=9)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o).commitTaskIds.find(t=>t.length>n);return[!s,`${s} taskId must not be longer than ${n} characters`]};var s=(t,e,n=3)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o).commitTaskIds.find(t=>t.length<n);return[!s,`${s} taskId must not be shorter than ${n} characters`]};var i=t=>{const e=t.raw;return e?[Object(r.parseCommitMessage)(e).commitTaskIds.length>0,`the commit message must provide minimum one task id followed by (${r.commitlintJiraConstants.COMMIT_MESSAGE_SEPARATOR}) symbol, if task does not have an id use a conventional task id e.g: "IB-0000${r.commitlintJiraConstants.COMMIT_MESSAGE_SEPARATOR} My commit message"`]:[!1,"Commit message should not be empty"]};var a=(t,e,n=r.commitlintJiraConstants.TASK_ID_SEPARATOR)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o).commitTaskIds.find(t=>!new RegExp(r.commitlintJiraConstants.TASK_ID_SEPARATOR).test(t));return[!s,`${s} taskId header and footer must be separated with "${n}" e.g: IB-2121`]};var m=(t,e,n="uppercase")=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o);let i="";return n===r.commitlintJiraConstants.UPPERCASE&&(i=s.commitTaskIds.find(t=>t!==t.toUpperCase())||""),n===r.commitlintJiraConstants.LOWERCASE&&(i=s.commitTaskIds.find(t=>t!==t.toLowerCase())||""),[!i,`${i} taskId must be ${n} case`]};var u=(t,e,n=r.commitlintJiraConstants.UPPERCASE)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o);if(!s.commitStatus)return[!0];let i=!1;return n===r.commitlintJiraConstants.UPPERCASE&&s.commitStatus===s.commitStatus.toUpperCase()&&(i=!0),n===r.commitlintJiraConstants.LOWERCASE&&s.commitStatus===s.commitStatus.toLowerCase()&&(i=!0),[i,`${s.commitStatus} commitStatus must be ${n} case`]};var c=(t,e,n=r.commitlintJiraConstants.COMMIT_MESSAGE_SEPARATOR)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];let s=!1;const i=o.match(new RegExp(`${n}`,"ig"));return i&&i[0]&&(s=!0),[s,`Commit message parts must be separated with "${n}" e.g: IB-2121${n}My commit message body`]};var l=(t,e,n)=>{const o=t.raw;if(!o)return[!1,"Commit message should not be empty"];const s=Object(r.parseCommitMessage)(o);let i=!1,a=null;return n?"string"!=typeof n&&!Array.isArray(n)&&n?[!1,"invalid rule option - jira project key should be a string or an array of strings"]:(s.commitTaskIds.forEach(t=>{let e=!1;"string"==typeof n&&(e=e||new RegExp(`^${n}`).test(t)),Array.isArray(n)&&(n.forEach(n=>{e=e||new RegExp(`^${n}`).test(t)}),e||(a=t)),e||(a=t)}),[i=null===a,`${a} taskId must start with project key ${"string"==typeof n?n:Array(n).join(" or ")}`]):[!0]};n.d(e,"commitlintPluginJira",(function(){return d}));const d={rules:{[r.commitlintJiraConstants.JIRA_RULES.taskIdEmpty]:i,[r.commitlintJiraConstants.JIRA_RULES.taskIdMinLength]:s,[r.commitlintJiraConstants.JIRA_RULES.taskIdMaxLength]:o,[r.commitlintJiraConstants.JIRA_RULES.taskIdSeparator]:a,[r.commitlintJiraConstants.JIRA_RULES.taskIdCase]:m,[r.commitlintJiraConstants.JIRA_RULES.taskIdProjectKey]:l,[r.commitlintJiraConstants.JIRA_RULES.commitStatusCase]:u,[r.commitlintJiraConstants.JIRA_RULES.commitMessageSeparator]:c}};e.default=d}]).default}));